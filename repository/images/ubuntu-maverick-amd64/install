#!/bin/sh

finfo () {
  /bin/flunky -S http://140.221.42.4:8080 -i "$${1}"
  echo "$${1}"
}

finfo "Starting up"

# this is to make sure we don't hork up the swap alreadyt being used.
#swapoff -a
for dev in /dev/sda*; do
  # turn off swap
  grep $$dev /proc/swaps > /dev/null && swapoff $$dev
  # unmount if needed
  grep $$dev /proc/mounts > /dev/null && umount $$dev
done


### BEGIN partition $$DISK0 ###
DISK0=/dev/sda
finfo "Partitioning disk $$DISK0"
#echo "Old partition table for $$DISK0:"
#parted -s -- $$DISK0 print

# Wipe the MBR (Master Boot Record) clean.
echo "dd if=/dev/zero of=$$DISK0 bs=512 count=1 "
dd if=/dev/zero of=$$DISK0 bs=512 count=1 

# Create disk label.  This ensures that all remnants of the old label, whatever
# type it was, are removed and that we're starting with a clean label.
echo "parted -s -- $$DISK0 mklabel msdos "
parted -s -- $$DISK0 mklabel msdos 

# Get the size of the destination disk so that we can make the partitions fit properly.
#DISK_SIZE=`parted -s $$DISK0 unit MB print | grep 'Disk geometry for' | sed 's/^.*-//g' | sed 's/\..*$$//' | sed 's/MB//' `
DISK_SIZE=`parted -s $$DISK0 unit MB print | grep Disk | awk '{print $$NF}' | sed 's/MB//'`

END_OF_LAST_PRIMARY=0

echo "Creating partition $${DISK0}1."
START_MB=$$END_OF_LAST_PRIMARY
END_MB=$$(echo "scale=3; ($$START_MB + 10000)" | bc)
echo "parted -s -- $$DISK0 mkpart primary $$START_MB $$END_MB "
parted -s -- $$DISK0 mkpart primary $$START_MB $$END_MB 
END_OF_LAST_PRIMARY=$$END_MB
echo parted -s -- $$DISK0 set 1 boot on 
parted -s -- $$DISK0 set 1 boot on 

echo "Creating partition $${DISK0}2."
START_MB=$$END_OF_LAST_PRIMARY
END_MB=$$(echo "scale=3; ($$START_MB + 16000)" | bc)
echo "parted -s -- $$DISK0 mkpart primary $$START_MB $$END_MB "
parted -s -- $$DISK0 mkpart primary $$START_MB $$END_MB 
END_OF_LAST_PRIMARY=$$END_MB

echo "Creating partition $${DISK0}3."
START_MB=$$END_OF_LAST_PRIMARY
END_MB=$$(echo "scale=3; ($$DISK_SIZE - 3)" | bc)
echo "parted -s -- $$DISK0 mkpart primary $$START_MB $$END_MB "
parted -s -- $$DISK0 mkpart primary $$START_MB $$END_MB 
END_OF_LAST_PRIMARY=$$END_MB

echo "New partition table for $$DISK0:"
echo "parted -s -- $$DISK0 print"
parted -s -- $$DISK0 print
### END partition $$DISK0 ###

sleep 5

finfo "Creating filesystems and swap"
### BEGIN swap and filesystem creation commands ###
echo "mkswap $${DISK0}2 "
mkswap $${DISK0}2 
echo "swapon $${DISK0}2 "
swapon $${DISK0}2 

echo "mkfs.ext4 $${DISK0}1 "
mkfs.ext4  $${DISK0}1 
echo "mkdir -p /a/ "
mkdir -p /a/ 
echo "mount $${DISK0}1 /a/ -t ext4  "
mount $${DISK0}1 /a/ -t ext4  

echo "mkfs.ext4  $${DISK0}3 "
mkfs.ext4  $${DISK0}3 
echo "mkdir -p /a/sandbox "
mkdir -p /a/sandbox 
echo "mount $${DISK0}3 /a/sandbox -t ext4  "
mount $${DISK0}3 /a/sandbox -t ext4 

### END swap and filesystem creation commands ###

################################################################################
#
#   Lay the image down on the freshly formatted disk(s)
#

finfo "Syncing image $Data.BUILDSERVER::/images/${Data.Image}"
echo "rsync -aHS$${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids $Data.BUILDSERVER::images/${Data.Image}/ /a/" 

while ! rsync -aHS$${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids $Data.BUILDSERVER::images/${Data.Image}/ /a/ > /dev/console ; 
do
   sleep 10; 
   echo "rsync -aHS$${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids $Data.BUILDSERVER::images/${Data.Image}/ /a/" 
done
#
################################################################################


finfo "Creating fstab"
### BEGIN generate new fstab file from autoinstallscript.conf ###
cat <<'EOF' > /a/etc/fstab
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
proc	/proc	proc	defaults	0	0
/dev/sda1 /	ext4	relatime,errors=remount-ro	0	1	# /dev/sda1
/dev/sda3 /sandbox	ext4	defaults	0	2	# /dev/sda3
/dev/sda2 none	swap	sw	0	0	# /dev/sda2
/dev/scd0	/media/cdrom0	udf,iso9660	user,noauto,exec,utf8	0	0
EOF
### END generate new fstab ###


# fix the hostname
nslookup `ifconfig | grep 140 | awk '{print $$2}' | awk -F: '{print $$2}'` | tail -n 1 | awk '{print $$4}' | awk -F. '{print $$1}' > /a/etc/hostname

echo -n "setting hostname to: " 
cat /a/etc/hostname

#run post install scripts
#/usr/local/bin/curl http://${Data.BUILDSERVER}/install-scripts/post-install.sh -o /a/tmp/post-install.sh
#chmod +x /a/tmp/post-install.sh
#chroot /a /tmp/post-install.sh

# Install boot loader
finfo "Installing Grub"
chroot /a /usr/sbin/grub-install $$DISK0
finfo "Running Bcfg2"
chroot /a /usr/sbin/bcfg2 -qvk

################################################################################
#
#   Unmount filesystems
#

finfo "Syncing disks"
sync
finfo "Unmounting disks"
echo "umount /a/sandbox || mount -no remount,ro /a//sandbox "
umount /a/sandbox || mount -no remount,ro /a//sandbox 

echo "umount /a/ || mount -no remount,ro /a// "
umount /a/ || mount -no remount,ro /a// 

echo "done unmounting filesystems"

reboot
